months_days = {
    1: 31,
    2: 28,
    3: 31,
    4: 30,
    5: 31,
    6: 30,
    7: 31,
    8: 31,
    9: 30,
    10: 31,
    11: 30,
    12: 31,
}


def is_leap_year(year):
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)


def check_date(date):
    year, month, day = date
    if not all(isinstance(i, int) for i in [year, month, day]):
        return False
    elif not (1 <= month <= 12):
        return False
    elif is_leap_year(year) and (month == 2) and (day > 29):
        return False
    elif day < 1 or day > months_days[month]:
        return False
    return True


def main(start_date, end_date):
    if (
        type(start_date) != tuple
        or len(start_date) != 3
        or type(end_date) != tuple
        or len(end_date) != 3
    ):
        raise ValueError("parameter must be a tuple with three elements")
    elif not check_date(start_date) or not check_date(end_date):
        raise ValueError("dates must be valid, in the form (year, month, day)")

    year1, month1, day1 = start_date
    year2, month2, day2 = end_date
    count = 0

    if (year1, month1) == (year2, month2):
        # if start and end dates are in the same month & year
        # add the difference of dates
        count = day2 - day1 + 1
        return count

    for y in range(year1, year2 + 1):
        leap = is_leap_year(y)

        for m in range(1, 13):

            days_in_month = 29 if m == 2 and leap else months_days[m]

            if (year1, month1) < (y, m) < (year2, month2):
                # month1/year1 < 1-12/year1-year2 < month2/year2
                # add the days of the months completely between the two dates
                count += days_in_month

            elif (year1, month1) == (y, m):
                # month1/year1 == 1-12/year1-year2
                # add the remainder dates for the start month
                count += days_in_month - day1 + 1

            elif (year2, month2) == (y, m):
                # month2/year2 == 1-12/year1-year2
                # add the remainder dates for the end month
                count += day2
    return count # including the start AND end date

